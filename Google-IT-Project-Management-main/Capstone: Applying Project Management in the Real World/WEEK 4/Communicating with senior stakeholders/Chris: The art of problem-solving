 I can't emphasize enough, "Problem solving is quintessentially the most important thing we do as program managers. It is the job." Whether it's a scope problem,
 something is out of scope or the scope is increasing or decreasing, whether it's a budgetary problem, like you don't have enough funds or too many funds, you 
 don't have enough people, too many people, wrong skillsets of people, whether it's a timeline problem, these are all problems fundamentally that we're here to solve.
 
 Our job is to identify it, figure out a framework based on our tools, on our processes, and methodologies, come up with a proposed solution and then get buy-in for
 that solution. The only way you're going to do that is to put something principally and organized together with these tools, and techniques, and methods.
 
 We try to always understand what is the root cause of the problem itself? Typically what you're experiencing is sort of a red herring or outcome of the underlying
 problem. Always debugging the initial underlying systemic issue or the process issue or the tooling issue or the technical issue, whatever it may be, under the hood,
 is actually the first step.
 
 Once you're able to identify and get enough information as to what that problem is and how you might solve it, then objectively putting a plan together based on those
 inputs is actually how you reach a decision which is the ultimate outcome.
 
 Many times these charters or scope docs or meeting notes or trackers or documents, these artifacts that we create or we manage on a day-to-day basis as part of our
 job, is the job. But that's actually not the job, those are just mechanisms, and tools, and methods to help you do the real job which is: running scope, running
 programs, convincing people, driving organizational change, solving strategic initiatives. 
 
 These things are just elements that help you navigate those problems as opposed to being the problems themselves. I think that's a really important takeaway. I think
 this is the thing that we practice most at Google in particular is trying to solve more complex, more strategic, more holistic, larger, more complex problems on a 
 day-to-day basis. 
 
 If you're new to this space, you haven't had the opportunity to work on these big problems. How do you build that problem-solving expertise? Whether it's a hobby,
 whether it's building a new piece of software for yourself, for your friend, whether it's another passion that you have in another industry, all of these are great
 ways to build skills and opportunities to just solve problems.
 
 Every industry, every business has them and there are lots of ways to solve these and build those skills.
